{"version":3,"sources":["components/Sidebar.js","components/Header.js","components/Code.js","pages/Home.js","pages/code/Api_Pool.js","pages/code/GetStarted_ReduxOne.js","pages/code/GetStarted_ReduxTwo.js","pages/code/GetStarted_Store.js","pages/code/GetStarted_Usage.js","App.js","pages/Api.js","pages/code/Api_Ext.js","pages/code/Api_Index.js","pages/code/Api_Usage.js","pages/code/Api_Methods.js","pages/HocBuilder.js","pages/code/HocBuilder_Index.js","pages/code/HocBuilder_Usage.js","pages/GetStarted.js","pages/code/GetStarted_Hoc.js","pages/Redux.js","pages/code/Redux_Staty.js","pages/Splitter.js","pages/code/Splitter_Sub.js","pages/code/Splitter_Main.js","pages/Autobind.js","pages/code/Autobind_Code.js","pages/Combined.js","pages/code/Combined_Reduxer.js","pages/code/Combined_Hoc.js","pages/code/Combined_Usage.js","serviceWorker.js","index.js"],"names":["map","props","className","open","List","item","ListItem","to","onClick","closeMenu","AppBar","position","Toolbar","Typography","variant","noWrap","Tooltip","title","placement","href","IconButton","Button","toggleMenu","id","language","style","coy","children","name","apiPoolOne","reduxerOne","reduxerTwo","apiPool","index","usage","storeCreation","App","useState","setOpen","path","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f786eac9.chunk.js","sourcesContent":["import React from \"react\"\n\nimport { List, ListItem } from \"@material-ui/core\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { AwesomeButton } from \"react-awesome-button\"\n\nimport \"react-awesome-button/src/styles/styles.scss\"\n\nimport \"./../styles/Sidebar.scss\"\n\nconst map = [\n    ['/', 'Home'],\n    ['/get-started', 'Get Started'],\n    ['/redux-and-reduxers', 'Redux and Reduxers'],\n    ['/hoc-builder', 'Hoc Builder'],\n    ['/combined-reduxers', 'Combined Reduxer - Redux Objects'],\n    ['/splitter', 'Splitter'],\n    ['/api', 'Api'],\n    ['/autobind', 'Autobind'],\n]\n\nexport default props => (\n    <div className={`sidebar ${props.open === true ? 'open' : ''}`}>\n        <List>\n            {map.map(item => {\n                return (\n                <ListItem>\n                    <Link to={item[0]} onClick={props.closeMenu}>\n                        <AwesomeButton>{item[1]}</AwesomeButton>\n                    </Link>\n                </ListItem>\n            )})}\n        </List>\n    </div>\n)\n","import React from \"react\"\n\nimport { AppBar, IconButton, Toolbar, Button, Tooltip, Typography } from \"@material-ui/core\"\n\nimport GitHubIcon from \"@material-ui/icons/GitHub\"\n\nimport \"./../styles/Header.scss\"\n\nexport default props => (\n    <AppBar className='topbar' position='fixed'>\n        <Toolbar>\n            <Typography variant='h5' noWrap>\n                Reactizy\n            </Typography>\n            <div>\n                <Tooltip title='Show on Github' placement='bottom'>\n                    <a href='https://github.com/pbenard73/reactizy'>\n                        <IconButton>\n                            <GitHubIcon />\n                        </IconButton>\n                    </a>\n                </Tooltip>\n                <Tooltip title=\"Menu\" placement=\"bottom\">\n                    <Button onClick={props.toggleMenu} id=\"top_menu\">Menu</Button>\n                </Tooltip>\n            </div>\n        </Toolbar>\n    </AppBar>\n)\n","import React from 'react'\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n\nimport { coy } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport './../styles/Code.scss'\n\nexport default props => (\n    <SyntaxHighlighter language=\"javascript\" style={coy} className=\"code_wrapper\">\n      {props.children}\n    </SyntaxHighlighter>    \n)\n","import React from 'react'\n\nimport './../styles/HomePage.scss'\n\nimport Code from './../components/Code'\n\nexport default () => (\n    <section name=\"homepage\">\n        <h1>Reactizy</h1>\n\n        <p><small>v6.0.1</small></p>\n\n        <p><b>Reactizy</b> is a <b>React High Order Component</b> and a toolkit allowing</p>\n        <p>\n            <ul>\n                <li>Simplify the use of <b>react-redux</b></li>\n                <li><b>Split react components</b> in order to have a better readability</li>\n                <li>Providing <b>asynchronous reducers</b></li>\n                <li>Call api with simply library</li>\n                <li>... and some usefull utilities.</li>\n            </ul>\n        </p>\n\n        <Code>npm install reactizy</Code>\n    </section>\n)\n","export default `/* src/api/main.js*/\nexport default {\n    mainRoute: {path:'/my_main_route'},\n    postRoute: {path:'/my_post_route', method:'post'},\n    customDomain: {path:'/my_other_route', domain:'http://mydomain.com'},\n    paramRoute: {path:'/my_other_route/:myParam', domain:'http://mydomain.com'},\n}`\n","export default `/* src/reduxers/login.js */\nclass LoginReducer {\n    state = {\n        user: null\n    }\n\n    actions = {\n        login: (state, user) => ({ ...state, user: user }),\n        logout: state => ({ ...state, user: null }),\n    }\n}\n\nexport default new LoginReducer()`\n","export default `/* src/reduxers/receipe.js */\nclass ReceipeReducer {\n    state = {\n        receipeToCook: 0\n    }\n\n    actions = {\n        increment: state => ({ ...state, receipeToCook: state.receipeToCook + 1}),\n        decrement: state => ({ ...state, receipeToCook: state.receipeToCook - 1}),\n        addToCook: (state, number) => ({ ...state, receipeToCook: state.receipeToCook + number})\n    }\n}\n\nexport default new ReceipeReducer()`\n","export default `/* src/index.js */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Store } from 'reactizy'\nimport Hoc from './hocs/Hoc'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Store hocs={[Hoc]}>\n       <App />\n    </Store>\n  </React.StrictMode>,\n  document.getElementById('root')\n)`\n","export default `import React from \"react\";\nimport Hoc from \"./hocs/Hoc\";\n\nclass MyComponent extends React.Component {\n    askLoginBindThis(username) {\n        this.props.login({name: window.prompt('Username')})\n        setTimeout(() => this.props.sayHello(this.props.user), 1000)\n    }\n\n    performLogoutBindThis() {\n        this.props.logout()\n        this.props.alert.info('Logout')\n    }\n\n    asyncLoginBindThis() {\n        this.props.call('complexLogin', {user: window.prompt('New Username')})\n    }\n\n    addReceipesBindThis() {\n        this.props.addToCook(5)\n    }\n\n    callApiBindThis() {\n        this.props.api.call('mainRoute')\n        .then(data => this.props.alert.success('Success'))\n        .catch(error => this.props.alert.error('Error occured'))\n    }\n\n    render {\n        return (\n            <div className=\"App\">\n                {this.props.user === null ? (\n                    <>\n                        <button onClick={this.askLogin}>Login</button>\n                        <button onClick={this.asyncLogin}>Login</button>\n                    </>\n                ) : (\n                    <button onClick={this.performLogout}>Logout</button>\n                )}\n\n                <button onClick={this.callApi}>Call Api</button>\n\n                <p> There are {this.props.receipeToCook} receipes </p>\n\n                <button onClick={this.addReceipes}>Add receipes</button>\n            </div>\n        )\n    }\n}     \n\nconst uses = ['alert', 'sayHello']\nconst state = ['user', 'receipeToCook']\nconst actions = ['login', 'logout', 'addToCook', 'complexLogin'] \n\nexport default Hoc(...uses, ...state, ...actions)(MyComponent)`\n","import React, { useState } from \"react\"\n\nimport Sidebar from \"./components/Sidebar\"\nimport Header from \"./components/Header\"\n\nimport { Route, Switch } from \"react-router-dom\"\n\nimport Home from \"./pages/Home\"\nimport Api from \"./pages/Api\"\nimport Combined from \"./pages/Combined\"\nimport GetStarted from \"./pages/GetStarted\"\nimport HocBuilder from \"./pages/HocBuilder\"\nimport Redux from \"./pages/Redux\"\nimport Autobind from \"./pages/Autobind\"\nimport Splitter from \"./pages/Splitter\"\n\nimport \"./styles/App.scss\"\n\nconst map = [\n    [\"/api\", Api],\n    [\"/hoc-builder\", HocBuilder],\n    [\"/get-started\", GetStarted],\n    [\"/redux-and-reduxers\", Redux],\n    [\"/splitter\", Splitter],\n    [\"/autobind\", Autobind],\n    [\"/combined-reduxers\", Combined]\n]\n\nconst App = () => {\n    const [open, setOpen] = useState(false)\n\n    return (\n        <div className='App'>\n            <Header toggleMenu={() => setOpen(!open)} />\n            <div className='wrapper'>\n                <Sidebar open={open} closeMenu={() => setOpen(false)}/>\n                <div className='content'>\n                    <Switch>\n                        {map.map(item => (\n                            <Route path={item[0]} component={item[1]} />\n                        ))}\n                        <Route component={Home} />\n                    </Switch>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from \"react\"\n\nimport Code from \"./../components/Code\"\n\nimport apiIndex from \"./code/Api_Index\"\nimport apiPoolOne from './code/Api_Pool'\nimport apiPoolTwo from './code/Api_Ext'\nimport apiUsage from './code/Api_Usage'\nimport apiMethods from './code/Api_Methods'\n\nexport default () => (\n    <section name='api' className='api'>\n        <h1>Api</h1>\n        <h2>Introduction</h2>\n        <p>The <b>Api</b> permits to easily call Api routes, in using the `Axios` node package</p>\n\n        <h2>Registration</h2>\n        <p>First, create the api routes objects</p>\n\n        <Code>{apiPoolOne}</Code>\n        <Code>{apiPoolTwo}</Code>\n\n        <p>After, register it into your hoc</p>\n        <p><i>You can use the <code>domainize</code> utility to set a custom domain for an api pool</i></p>\n\n        <Code>{apiIndex}</Code>\n\n        <h3>Usage</h3>\n        <Code>{apiUsage}</Code>\n\n        <h3>Methods</h3>\n\n        <Code>{apiMethods}</Code>\n    </section>\n)\n","export default `/* src/api/ext.js*/\nexport default {\n    extRoute: {path:'/my_main_route'},\n    extPostRoute: {path:'/my_post_route'},\n}`\n","export default `/* src/hocs/Hoc.js*/\nimport { domainize } from 'reactizy'\nimport mainApi from './api/main'\nimport extApi from './api/ext'\n\nexport default hocBuilder({\n    apis: [mainApi, domainize('https://myDomain.com', extApi)],\n)\n`\n","export default `import React from 'react'\nimport { withReactizy } from 'reactizy'\n\nconst Compo = props => {\n    const click = () => {\n        props.api.call('mainRoute')\n        .then(response => {})\n        .catch(error => console.log(error))\n    }\n\n    return (\n        <div className=\"my-compo\">\n            <button onClick={click}>my api trigger</button>\n        </div>\n    )\n}\n\nexport default withReactizy(Compo)`\n","export default `props.api.call(routeName, urlParams = {}, body = {}, extraOptions = {})\n\nprops.api.url(routeName, urlParams = {})\n\nprops.api.call(stringUrl, urlParams = {}, body = {})\n`\n","import React from \"react\"\nimport { Link } from 'react-router-dom'\nimport Code from \"./../components/Code\"\n\nimport registerHoc from \"./code/HocBuilder_Index\"\nimport hocUsage from \"./code/HocBuilder_Usage\"\n\nexport default () => (\n    <section name='hoc builder' className='hoc_builder'>\n        <h1>Hoc Builder</h1>\n\n        <p>\n            The Hoc Builder permits to :\n            <ul>\n                <li>create the main High Order Component</li>\n                <li>register the third part HOCs</li>\n                <li>create your owns simple HOC</li>\n                <li>link a splitted component to every React Component (they must be designed as class form)</li>\n            </ul>\n        </p>\n\n        <h2>Create your High Order Component</h2>\n\n        <Code>{registerHoc}</Code>\n\n        <p>\n            The HocBuilder takes as argument an object with following keys :\n            <dl>\n                <dt><b>apis</b></dt>\n                <dd>array : an array of api pool</dd>\n                <dt><b>reduxers</b></dt>\n                <dd>array : an array of reduxers</dd>\n                <dt><b>hocs</b></dt>\n                <dd>object : the shortname as key and third HOC as value</dd>\n                <dt><b>customs</b></dt>\n                <dd>object : the shortname as key and function transformed as HOC as value</dd>\n                <dt><b>thunks</b></dt>\n                <dd>object : shortname as key and function transformed as redux-thunk thunks</dd>\n                <dt><b>fusion</b></dt>\n                <dd>array : An array representing all splitted that will be merge into each component implementing this current hoc.</dd>\n                <dt><b>options</b></dt>\n                <dd>object : options object to configure the HOC</dd>\n            </dl>\n        </p>\n\n        <h3>Beware of reduxers</h3>\n\n        <p>In order to retrieve all the states and reduxers actions, the first hocs you registered into the <code>Store</code> must be filled with the whole list of reduxers, those will serve to fill the redux store.</p>\n\n        <h3>Thunks</h3>\n        \n        <p>All the thunks are functions, each arguments must be passes in the returning callback.</p>\n        <p>In component, the call the the thunk is made vi <code>{\"this.props.call('thunkShortname', ...args)\"}</code></p>\n        <p>If the options <code>{\"{name: 'dispatch'}\"}</code> for exemple is given then the call will be <code>{\"this.props.dispatch('thunkShortname', ...args)\"}</code></p>\n\n        <h3>Fusion</h3>\n\n        <p>Fusion is an array of piece of component that will be merge in every class Component using the HOC</p>\n        <p>The <code>component</code> key, is a function returning a <Link to=\"/splitter\">Splitted class</Link></p>\n        <p>The <code>uses</code>, <code>state</code>, <code>actions</code>, are partials HOC arguments that will be passed in complement of main Component arguments.</p>\n\n        <h3>Options</h3>\n\n        <p>Actually the options takes the <code>name</code> key representing the property name to call the thunks actions and generic redux actions.</p>\n\t<p>The <code>bindAll</code> (boolean) binds every thing to every components</p>\n\t<p>The <code>pure</code> (string) is the hoc method to simply connect to the redux store</p>\n\n        <h2>Usage in component</h2>\n\n        <Code>{hocUsage}</Code>\n    </section>\n)\n","export default `// hoc/Hoc.js\nimport { hocBuilder } from 'reactizy'\n\nimport { withRouter } from 'react-dom-router'\nimport { withAlert } from 'react-alert'\nimport SplittedCompo from './../partial/SplittedCompo\nimport login from './../reduxers/login'\nimport receipe from './../reduxers/receipe'\nimport api from './../apis/Api'\n\nexport default hocBuilder({\n    apis: [api],\n    reduxers: [login, receipe],\n    hocs: {\n        alert: withAlert(),\n        router: withRouter\n    },\n    customs: {\n        showSomething: function(text) {\n            alert(text)\n        }\n    },\n    thunks: {\n        complexLogin: (dispatch, getState, user) => {\n            setTimeout(() => dispatch('login', user), 2000)\n        }\n    },\n    fusion: [SplittedCompo],\n    options: {\n        name: 'execute', // default 'call' => props name to dispatch action,\n        bindAll: false // default false => bind every thing in every 'hoced' components,\n        pure: 'pure' // default 'pure' => hoc method to simply connect to redux store\n    }\n})\n`\n","export default `/*\n   uses: an array of hocs shortname to link\n   state: an array of redux state to link\n   actions: array of redux action or thunks, if true provided, all methods will be linked\n\n   Note that this declarations are for better readability, they can be mixed, but be aware of unicity.\n*/\n\nexport default Hoc(...uses, ...state, ...actions)(Component)\n\n// The hoc fusion can be disabled in setting the argument as false, preceding the Component\nexport default Hoc(...uses, ...state, ...actions)(false, Component)\n\nexport default Hoc()(Component, Splitted, OtherSplitted)\n\n// It will affect all registered uses, state, and actions\nexport default Hoc(true)(Component)\n\n// Simply connect to the redux store with given actions and states\nexport default Hoc.pure(...state, ...actions)(Component)\n`\n","import React from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport Code from \"./../components/Code\"\n\nimport registerHoc from './code/GetStarted_Hoc'\nimport reduxerOne from './code/GetStarted_ReduxOne'\nimport reduxerTwo from './code/GetStarted_ReduxTwo'\nimport apiPool from './code/Api_Pool'\nimport index from './code/GetStarted_Store'\nimport usage from './code/GetStarted_Usage'\n\nconst url = \"/hoc-builder\"\n\nexport default () => (\n    <section name='get started' className='get_started'>\n        <h1>Get Started</h1>\n\n        <h2>Create your Reduxers</h2>\n\n        <p>Register the reduxers you need to use</p>\n\n       <Code>{reduxerOne}</Code> \n       <Code>{reduxerTwo}</Code> \n\n        <h2>Create your Api routing files</h2>\n\n        <Code>{apiPool}</Code>\n\n        <h2>Create your High Order Component</h2>\n\n        <p>Register here your wanted HOC with their shortname. Be careful of unicity of the shortnames. It shouldn't be present in the reduxers pool and actions. <Link to={url}>Full details about the provided features</Link></p>\n\n        <p>Here is an example with <code>withRouter</code> from <code>react-router-dom</code> and <code>withAlert</code> from <code>react-alert</code> packages</p>\n\n       <Code>{registerHoc}</Code> \n\n        <h2>Implement your application</h2>\n\n        <Code>{index}</Code>\n\n\t<p>If the last item of the <code>hocs</code> array is set to <code>true</code> then the redux developper tools will be instanciate (usefull in dev mode).</p>\n\n        <h2>Use in Component</h2>\n\n        <Code>{usage}</Code>\n        \n    </section>\n)\n","export default `/* src/hocs/Hoc.js */\nimport { hocBuilder } from 'reactizy'\nimport { withRouter } from 'react-dom-router'\nimport { withAlert } from 'react-alert'\nimport login from './../reduxers/login'\nimport receipe from './../reduxers/receipe'\nimport api from './../api/main.js'\n\nexport default hocBuilder({\n    apis: [api],\n    reduxers: [login, receipe],\n    hocs: {\n        alert: withAlert(),\n        router: withRouter\n    },\n    thunks: {\n        complexLogin: (dispatch, getState, user) => {\n            setTimeout(() => dispatch('login', user), 2000)\n        }\n    },\n    customs: {\n        sayHello: function(name) {\n            window.alert(\\`Hello $\\{name}\\`)\n        }\n    }\n)`\n","import React from \"react\"\n\nimport Code from \"./../components/Code\"\nimport { Link } from 'react-router-dom'\nimport reduxerOne from \"./code/GetStarted_ReduxOne\"\nimport reduxerTwo from \"./code/GetStarted_ReduxTwo\"\nimport storeCreation from \"./code/GetStarted_Store\"\nimport usage from \"./code/GetStarted_Usage\"\nimport staty from \"./code/Redux_Staty\"\n\nexport default () => (\n    <section name='get started' className='get_started'>\n        <h1>Redux and Reduxers</h1>\n        <h2>Reduxers Creation</h2>\n\n        <h3>Introduction</h3>\n        <p>\n            Each reducer is composed by an state object that will be merged into a global state object, and an actions that\n            references all the methods. The method's name is the key, the method is the value.\n        </p>\n\n        <p>For the asynchronous methods, refer to the <Link to=\"/hoc-builder\">Hoc Builder</Link> documentation.</p>\n\n        <h3>Usage</h3>\n        <Code>{reduxerOne}</Code>\n        <Code>{reduxerTwo}</Code>\n\n        <h2>Store Creation</h2>\n\n        <Code>{storeCreation}</Code>\n\n        <h2>Usage in Components</h2>\n        <Code>{usage}</Code>\n\n\t<h2>Tips</h2>\n\n\t<h3>staty</h3>\n\t<p>If some base state update must be triggered, you can use the <code>staty</code> function in order to simplify this actions </p>\n        <Code>{staty}</Code>\n\n\n    </section>\n)\n","export default `/* src/reduxers/ecolo.js */\nimport { staty } from 'reactizy'\n\nclass EcoloReducer {\n    state = {\n        fruit: 'apple',\n        tree: 'oak',\n        vegetable: 'salade',\n    }\n\n    actions = {\n\t    ...staty('fruit', 'tree'),\n\t    setVegetable: staty('vegetable', true)\n    }\n}\n\nexport default new EcoloReducer()\n\n\n/* This Will generate */\n\nactions = {\n    setFruit: (state, fruit) => ({...state, fruit}),\n    setTree: (state, tree) => ({...state, tree}),\n    setVegetable: (state, vegetable) => ({...state, vegetable})\n}`\n","import React from 'react'\n\nimport Code from \"./../components/Code\"\n\nimport mainCode from './code/Splitter_Main'\nimport subCode from './code/Splitter_Sub'\n\nexport default () => (\n    <section name='splitter' className='splitter'> \n        <h1>Splitter</h1>\n        <h2>Introduction</h2>\n        \n        <p>The Splitter behaviour permits to merge many Classes to the current Component</p>\n        <p>All the methods will be merged into the components.</p>\n\n        <p>If a <code>state</code> object is defined, it will be merged into the state of the main component</p>\n\n        <p>If a <code>hoc</code> array is provided, it will be merged inside the HOC arguments of the main Components</p>\n\n        <h2>Usage</h2>\n        \n        <p>The following code result in a state corresponding to :</p>\n        <p><code>{\"state = {foo: 'bar', partCount: 0}\"}</code></p>\n\n        <p>And the export Hoc will correspond to : </p>\n        <p><code>export default Hoc(\"user\", \"receipeToCook\", \"login\", \"decrement\", \"logout\")(App, SubPage);</code></p>\n\n        <p>All the parts methods will be merged inside the main component.</p>\n\n        <hr />\n\n        <Code>{subCode}</Code>\n        <Code>{mainCode}</Code>\n    </section>\n)\n","export default `// src/partials/SubPage.js\n\nclass SubPage {\n    state = { partCount: 0  }\n\n    hoc = ['receipeToCook', 'decrement', 'logout'] \n\n    incrementPartCountBindThis() {\n        this.setState({partCount: this.state.partCount + 1})\n    }\n\n    renderSubArea() {\n        return (\n            <section>\n                <button onClick={this.incrementPartCount}>Increment {this.state.partCount}</button>\n    \n                <button onClick={this.props.decrement}>\n                    Decrement Receipes   \n                </button>\n            </section>\n        )\n    }\n}\n\nexport default new SubPage()`\n","export default `/* src/App.js */\n\nimport React from \"react\";\n\nimport SubPage from './partials/SubPage'\n\nimport Hoc from \"./hocs/Hoc\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = { foo: 'bar' }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <p> There are {this.props.receipeToCook} receipes</p>\n                {this.props.user === null ? (\n                    <button onClick={this.props.login}>Login</button>\n                ) : (\n                    <p onClick={this.props.logout}>Logout</p>\n                )}\n                { this.renderSubArea()  }\n            </div>\n        )\n    }\n}\n\nexport default Hoc(\"user\", \"login\")(App, SubPage);`\n","import React from 'react'\n\nimport Code from \"./../components/Code\"\n\nimport mainCode from './code/Autobind_Code'\n\nexport default () => (\n    <section name='autobind' className='autobind'>           \n        <h1>Autobind</h1>\n        <h2>Introduction</h2>\n        <p><b>Autobind</b> is a feature for <i>lazy</i> developpers 😋, to avoid the <code>method.bind(this)</code> declaration in the component constructor.</p>\n\n        <h2>Usage</h2>\n        <Code>{mainCode}</Code>\n    </section>\n)\n\n","export default `import React from 'react'\n\nimport { autobind } from 'reactizy'\n\nclass Page extends React.Component {\n    constructor(props) {\n        this.state = { foo: 'bar' }\n\n        autobind.call(this)\n    }\n\n    onClickBindThis() {\n        // do some stuff\n    }\n\n    onSubmitBindThis(e) {\n        // do some stuff\n    }\n\n    render() {\n        return (\n            <section className=\"page\">\n                <form onSubmit={this.onSubmit}>\n                    // rest of the form\n                </form>\n\n                <button onClick={this.onClick}>Click me<button>\n            </section>\n        )\n    }\n}\n\nexport default Page`\n","import React from \"react\"\n\nimport Code from \"./../components/Code\"\nimport codeCreation from \"./code/Combined_Reduxer\"\nimport codeHoc from \"./code/Combined_Hoc\"\nimport codeUsage from \"./code/Combined_Usage\"\n\nexport default () => (\n    <section name='combined reduxer' className='get_started'>\n        <h1>Combined Reduxers</h1>\n        <h2>Create Redux Objects</h2>\n\n        <h3>Introduction</h3>\n        <p>\n\t\tAs <code>Redux</code> combined reducers, the Reactizy combined reduxers allow to separate your store in different state objects with their own state, all the actions and thunks relative to this reduxers will aso be bind under the same object.\n        </p>\n\n        <h3>Combined Reduxer Creation</h3>\n        <Code>{codeCreation}</Code>\n\n\t<p>Use the <code>combine</code> function from <code>Reactizy</code> to transform your reduxer to combined reduxer. <br/>The first argument is the object{\"'\"}s name in the redux state.</p>\n        <Code>{codeHoc}</Code>\n\n\t<h3>Usage</h3>\n        <Code>{codeUsage}</Code>\n\n\t<p>All the actions and thunks from combined reduxer are callable by other dispatch method in prefixing them by the reduxer name</p>\n\n\t\n\n    </section>\n)\n","export default `/* src/reduxers/restaurant.js */\nimport { staty } from 'reactizy'\n\nclass RestaurantReducer {\n    state = {\n        places: 0,\n        tables: 0,\n        chairs: 0\n    }\n\n    actions = staty('places', 'tables', 'chairs')\n\n    thunks = {\n        asyncPlaces: (dispatch, getState, number) => setTimeout(() => dispatch('restaurant.setPlaces', number), 2000)\n    }\n}\n\nexport default new RestaurantReducer()`\n","export default `/* src/hocs/Hoc.js */\nimport { hocBuilder, combine } from 'reactizy'\nimport restaurant from './../reduxers/restaurant'\nimport receipe from './../reduxers/receipe'\nimport api from './../api/main.js'\n\nexport default hocBuilder({\n    apis: [api],\n    reduxers: [combine('restaurant', restaurant), receipe],\n    hocs: {\n        alert: withAlert(),\n        router: withRouter\n    },\n)`\n","export default `import React from \"react\";\nimport Hoc from \"./hocs/Hoc\";\n\nclass MyComponent extends React.Component {\n    onClickBindThis() {\n        this.props.restaurant.setTables(window.prompt('Number of Tables ?'))\n    }\n\n    render {\n        return (\n            <div className=\"App\">\n                <button onClick={this.onClick}>Change Tables Number</button>\n\n                <p> There are {this.props.restaurant.tables} tables. </p>\n            </div>\n        )\n    }\n}     \n\nexport default Hoc('restaurant')(MyComponent)`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}