{"version":3,"sources":["components/Sidebar.js","components/Header.js","pages/Home.js","components/Code.js","pages/Api.js","pages/code/Api_Pool.js","pages/code/Api_Ext.js","pages/code/Api_Index.js","pages/code/Api_Usage.js","pages/code/Api_Methods.js","pages/GetStarted.js","pages/Redux.js","pages/code/GetStarted_ReduxOne.js","pages/code/GetStarted_ReduxTwo.js","pages/code/GetStarted_Store.js","pages/code/GetStarted_Usage.js","pages/Autobind.js","pages/code/Autobind_Code.js","pages/Splitter.js","pages/code/Splitter_Sub.js","pages/code/Splitter_Main.js","pages/HocImporter.js","pages/code/HocImporter_Index.js","pages/code/HocImporter_Simple.js","pages/code/HocImporter_Inner.js","App.js","serviceWorker.js","index.js"],"names":["map","props","className","List","item","url","ListItem","to","onClick","update","AppBar","position","Toolbar","Typography","variant","noWrap","Tooltip","title","placement","href","IconButton","name","language","style","xonokai","children","Code","App","state","page","URLSearchParams","document","location","search","get","updateUrl","bind","this","setState","console","log","Page","undefined","indexOf","Home","Api","GetStarted","Redux","Splitter","Autobind","HocImporter","getPage","React","Component","withRouter","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kQAYMA,G,YAAM,CACR,CAAC,IAAK,QACN,CAAC,qBAAsB,eACvB,CAAC,4BAA6B,sBAC9B,CAAC,kBAAmB,YACpB,CAAC,sBAAuB,gBACxB,CAAC,aAAc,OACf,CAAC,kBAAmB,cAGT,WAAAC,GAAK,OAChB,yBAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACKH,EAAIA,KAAI,SAAAI,GACL,IAAMC,EAAG,mBAAeD,EAAK,IAC7B,OACA,kBAACE,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMC,GAAIF,EAAKG,QAAS,kBAAMP,EAAMQ,OAAOJ,KACvC,kBAAC,gBAAD,KAAgBD,EAAK,Y,8DCtB9B,G,MAAA,kBACX,kBAACM,EAAA,EAAD,CAAQR,UAAU,SAASS,SAAS,SAChC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,YAGA,6BACI,kBAACC,EAAA,EAAD,CAASC,MAAM,iBAAiBC,UAAU,UACtC,uBAAGC,KAAK,yCACJ,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,c,OCdb,G,MAAA,kBACX,6BAASC,KAAK,YACV,wCAEA,2BAAG,0CAEH,2BAAG,uCAAH,gDAA+D,0CAA/D,sI,kBCJO,WAAApB,GAAK,OAChB,kBAAC,IAAD,CAAmBqB,SAAS,aAAaC,MAAOC,KAC7CvB,EAAMwB,WCEE,oBACX,6BAASJ,KAAK,MAAMnB,UAAU,OAC1B,mCACA,4CACA,kCAAO,kCAAP,yEAEA,4CACA,mEAEA,kBAACwB,EAAD,KCnBM,4RDoBN,kBAACA,EAAD,KEpBM,gIFsBN,wDAA6B,0CAA7B,SACA,2BAAG,8CAAmB,2CAAnB,oDAEH,kBAACA,EAAD,KGzBM,ueH2BN,qCACA,kBAACA,EAAD,KI5BM,waJ8BN,uCAEA,kBAACA,EAAD,KKhCM,mLCMC,oBACX,6BAASL,KAAK,cAAcnB,UAAU,eAClC,6CAEA,4CAEA,kBAACwB,EAAD,KARS,iCCKF,oBACX,6BAASL,KAAK,cAAcnB,UAAU,eAClC,kDACA,iDAEA,4CACA,iOAIA,kDAEA,oTAMA,qCACA,kBAACwB,EAAD,KC5BM,ieD6BN,kBAACA,EAAD,KE7BM,+PF+BN,8CAEA,kBAACA,EAAD,KGjCM,qcHmCN,mDACA,kBAACA,EAAD,KIpCM,ofCMC,oBACX,6BAASL,KAAK,WAAWnB,UAAU,YAC/B,wCACA,4CAEA,qCACA,kBAACwB,EAAD,KCZM,qpBCOC,oBACX,6BAASL,KAAK,WAAWnB,UAAU,YAC/B,wCACA,4CAEA,kBAACwB,EAAD,KCZM,2pBDaN,kBAACA,EAAD,KEbM,wpBCQC,oBACX,6BAASL,KAAK,eAAenB,UAAU,gBACnC,4CACA,4CACA,kCAAO,2CAAP,8FAEA,qCAEA,0DACA,qCAAU,uCAAV,uBAA6C,sCAA7C,qBAAgF,uCAAhF,2CACA,kBAACwB,EAAD,KClBM,u1BDoBN,8DACA,qCAAU,uCAAV,2BAAiD,0CAAjD,8CACA,kBAACA,EAAD,KEtBM,q0BFwBN,kDACA,kBAACA,EAAD,KGxBM,uX,WCkBRC,E,kDACF,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IACD2B,MAAQ,CACTC,KAAM,IAAIC,gBAAgBC,SAASC,SAASC,QAAQC,IAAI,SAG5D,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBANF,E,iEAUf,IAAMP,EAAO,IAAIC,gBAAgBC,SAASC,SAASC,QAAQC,IAAI,QAC3DG,KAAKT,MAAMC,OAASA,GACpBQ,KAAKC,SAAS,CAAET,W,gCAIdA,GACNQ,KAAKC,SAAS,CAACT,W,+BAGT,IAAD,OACLU,QAAQC,IAAIH,KAAKT,MAAMC,MACvB,IAuBMY,EAvBU,WACZ,IAAoD,IAAhD,CAAC,UAAMC,GAAWC,QAAQ,EAAKf,MAAMC,MACrC,OAAOe,EAGX,OAAQ,EAAKhB,MAAMC,MACf,IAAK,MACD,OAAOgB,EACX,IAAK,cACD,OAAOC,EACX,IAAK,qBACD,OAAOC,EACX,IAAK,WACD,OAAOC,EACX,IAAK,WACD,OAAOC,EACX,IAAK,eACD,OAAOC,EACX,QACI,OAAON,GAINO,GAEb,OACI,yBAAKjD,UAAU,OACX,kBAAC,EAAD,MACI,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAASO,OAAQ4B,KAAKF,YACtB,yBAAKjC,UAAU,WACX,kBAACuC,EAAD,a,GAtDVW,IAAMC,WA8DTC,cAAW3B,GCrEN4B,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGF9B,SAAS+B,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.9a20799e.chunk.js","sourcesContent":["import React from \"react\"\n\nimport { List, ListItem } from \"@material-ui/core\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { AwesomeButton } from \"react-awesome-button\"\n\nimport \"react-awesome-button/src/styles/styles.scss\"\n\nimport \"./../styles/Sidebar.scss\"\n\nconst map = [\n    ['/', 'Home'],\n    ['/?page=get-started', 'Get Started'],\n    ['/?page=redux-and-reduxers', 'Redux and Reduxers'],\n    ['/?page=splitter', 'Splitter'],\n    ['/?page=hoc-importer', 'Hoc Importer'],\n    ['/?page=api', 'Api'],\n    ['/?page=autobind', 'Autobind'],\n]\n\nexport default props => (\n    <div className='sidebar'>\n        <List>\n            {map.map(item => {\n                const url = `/reactizy${item[0]}`\n                return (\n                <ListItem>\n                    <Link to={url} onClick={() => props.update(url)}>\n                        <AwesomeButton>{item[1]}</AwesomeButton>\n                    </Link>\n                </ListItem>\n            )})}\n        </List>\n    </div>\n)\n","import React from \"react\"\n\nimport { AppBar, IconButton, Toolbar, Tooltip, Typography } from \"@material-ui/core\"\n\nimport GitHubIcon from \"@material-ui/icons/GitHub\"\n\nimport \"./../styles/Header.scss\"\n\nexport default () => (\n    <AppBar className='topbar' position='fixed'>\n        <Toolbar>\n            <Typography variant='h5' noWrap>\n                Reactizy\n            </Typography>\n            <div>\n                <Tooltip title='Show on Github' placement='bottom'>\n                    <a href='https://github.com/pbenard73/reactizy'>\n                        <IconButton>\n                            <GitHubIcon />\n                        </IconButton>\n                    </a>\n                </Tooltip>\n            </div>\n        </Toolbar>\n    </AppBar>\n)\n","import React from 'react'\n\nimport './../styles/HomePage.scss'\n\nexport default () => (\n    <section name=\"homepage\">\n        <h1>Reactizy</h1>\n\n        <p><small>v1.3.1</small></p>\n\n        <p><b>Reactizy</b> is a toolkit allowing to simplify to use of <b>react-redux</b>, makes it asynchronous and permits to split react component in order to have a better readability, with some usefull utilities</p>\n    </section>\n)\n","import React from 'react'\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n\nimport { xonokai } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nexport default props => (\n    <SyntaxHighlighter language=\"javascript\" style={xonokai}>\n      {props.children}\n    </SyntaxHighlighter>    \n)\n","import React from \"react\"\n\nimport Code from \"./../components/Code\"\n\nimport apiIndex from \"./code/Api_Index\"\nimport apiPoolOne from './code/Api_Pool'\nimport apiPoolTwo from './code/Api_Ext'\nimport apiUsage from './code/Api_Usage'\nimport apiMethods from './code/Api_Methods'\n\nexport default () => (\n    <section name='api' className='api'>\n        <h1>Api</h1>\n        <h2>Introduction</h2>\n        <p>The <b>Api</b> permits to easily call Api routes, in using the `Axios` node package</p>\n\n        <h2>Registration</h2>\n        <p>First, create the api routes objects</p>\n\n        <Code>{apiPoolOne}</Code>\n        <Code>{apiPoolTwo}</Code>\n\n        <p>After, register it in the <code>index.js</code> file</p>\n        <p><i>You can use the <code>domainize</code> utility to set a custom domain for an api pool</i></p>\n\n        <Code>{apiIndex}</Code>\n\n        <h3>Usage</h3>\n        <Code>{apiUsage}</Code>\n\n        <h3>Methods</h3>\n\n        <Code>{apiMethods}</Code>\n    </section>\n)\n","export default `/* src/api/main.js*/\nexport default {\n    mainRoute: {path:'/my_main_route'},\n    postRoute: {path:'/my_post_route'},\n    customDomain: {path:'/my_other_route', domain:'http://mydomain.com'},\n    paramRoute: {path:'/my_other_route/:myParam', domain:'http://mydomain.com'},\n}`\n","export default `/* src/api/ext.js*/\nexport default {\n    extRoute: {path:'/my_main_route'},\n    extPostRoute: {path:'/my_post_route'},\n}`\n","export default `/* src/index.js*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Store, domainize } from 'reactizy'\nimport mainApi from './api/main'\nimport extApi from './api/ext'\n\nimport main from './reduxers/main'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Store reduxers={[main]} apis={[mainApi, domainize('https://myDomain.com', extApi)]}>\n        <App />\n    </Store>\n  </React.StrictMode>,\n  document.getElementById('root')\n)`\n\n","export default `import React from 'react'\nimport { withReactizy } from 'reactizy'\n\nconst Compo = props => {\n    const click = () => {\n        props.api.call('mainRoute')\n        .then(response => {})\n        .catch(error => console.log(error))\n    }\n\n    return (\n        <div className=\"my-compo\">\n            <button onClick={click}>my api trigger</button>\n        </div>\n    )\n}\n\nexport default withReactizy(Compo)`\n","export default `props.api.call(routeName, urlParams = {}, body = {}, extraOptions = {})\n\nprops.api.url(routeName, urlParams = {})\n\nprops.api.call(stringUrl, urlParams = {}, body = {})\n`\n","import React from \"react\"\n\nimport Code from \"./../components/Code\"\n\nconst installCode = `npm install --save reactizy`\n\nexport default () => (\n    <section name='get started' className='get_started'>\n        <h2>Prerequisites</h2>\n\n        <h2>Installation</h2>\n\n        <Code>{installCode}</Code>\n    </section>\n)\n","import React from \"react\"\n\nimport Code from \"./../components/Code\"\n\nimport reduxerOne from \"./code/GetStarted_ReduxOne\"\nimport reduxerTwo from \"./code/GetStarted_ReduxTwo\"\nimport storeCreation from \"./code/GetStarted_Store\"\nimport usage from \"./code/GetStarted_Usage\"\n\nexport default () => (\n    <section name='get started' className='get_started'>\n        <h1>Redux and Reduxers</h1>\n        <h2>Reduxers Creation</h2>\n\n        <h3>Introduction</h3>\n        <p>\n            Each reducer is composed by an state object that will be merged into a global state object, and an actions that\n            references all the methods. The method's name is the key, the method is the value.\n        </p>\n        <h3>Asynchrone methods</h3>\n\n        <p>\n            In case where the method should be asynchronous, just add Async as suffix of the method's name. In that case, the\n            method returns a promise, which is resolve in passing the new state in return. Differently of normal behaviour,\n            the Async methods can take all arguments you needs.\n        </p>\n\n        <h3>Usage</h3>\n        <Code>{reduxerOne}</Code>\n        <Code>{reduxerTwo}</Code>\n\n        <h2>Store Creation</h2>\n\n        <Code>{storeCreation}</Code>\n\n        <h2>Usage in Components</h2>\n        <Code>{usage}</Code>\n    </section>\n)\n","export default `/* src/reduxers/people.js*/\nclass PeopleReducer {\n    state = {\n        peopleNumber: 0\n    }\n\n    actions: {\n        addPerson: state => { return { ...state, peopleNumber: state.peopleNumber + 1 }},\n        setPeopleNumber: (state, peopleNumber) => return { ...state, peopleNumber}},\n        updatePeopleAsync: (...args) => new Promise((resolve, reject) => {\n            resolve({peopleNumber: 10})\n        })        \n    }\n}\n\nexport default new PeopleReducer()`\n","export default `// src/reduxers/animal.js\nclass AnimalReducer {\n    state = {\n        animals: []\n    }\n\n    actions: {\n        addAnimal: (state, animal) => { return { ...state, animals: [...animals, animal] }},\n    }\n}\n\nexport default new AnimalReducer()`\n","export default `// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Store } from 'reactizy'\n\nimport people from './reduxers/people'\nimport animals from './reduxers/animals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Store reduxers={[people, animal]} >\n    <App />\n    </Store>\n  </React.StrictMode>,\n  document.getElementById('root')\n);`\n","export default `import React from \"react\";\n\nimport { withReactizy } from \"reactizy\";\n\nfunction App(props) {\n    return (\n        <div className=\"App\">\n            <p> There are {props.peopleNumber} people </p>\n            <button onClick={props.addPerson}>Add people</button>\n            <button onClick={props.updatePeopleAsync}>Update People</button>\n        </div>\n    );  \n}     \n    \nApp.reduxers = [ [\"peopleNumber\"], [\"addPerson\", \"updatePeopleAsync\"] ]\n\nexport default withReactizy(App)`\n","import React from 'react'\n\nimport Code from \"./../components/Code\"\n\nimport mainCode from './code/Autobind_Code'\n\nexport default () => (\n    <section name='autobind' className='autobind'>           \n        <h1>Autobind</h1>\n        <h2>Introduction</h2>\n\n        <h2>Usage</h2>\n        <Code>{mainCode}</Code>\n    </section>\n)\n\n","export default `import React from 'react'\n\nimport { autobind } from 'reactizy'\n\nclass Page extends React.Component {\n    constructor(props) {\n        this.state = { foo: 'bar' }\n\n        autobind.call(this)\n    }\n\n    onClickBindThis() {\n        // do some stuff\n    }\n\n    onSubmitBindThis(e) {\n        // do some stuff\n    }\n\n    render() {\n        return (\n            <section className=\"page\">\n                <form onSubmit={this.onSubmit}>\n                    // rest of the form\n                </form>\n\n                <button onClick={this.onClick}>Click me<button>\n            </section>\n        )\n    }\n}\n\nexport default Page`\n","import React from 'react'\n\nimport Code from \"./../components/Code\"\n\nimport mainCode from './code/Splitter_Main'\nimport subCode from './code/Splitter_Sub'\n\nexport default () => (\n    <section name='splitter' className='splitter'> \n        <h1>Splitter</h1>\n        <h2>Introduction</h2>\n        \n        <Code>{subCode}</Code>\n        <Code>{mainCode}</Code>\n    </section>\n)\n","export default `// src/partials/SubPage.js\n\nclass SubPage {\n    state = { currentAnimal: null  }\n\n    reduxers = [ ['animals'], ['addAnimal'] ]\n\n    // See the autobind tool\n    addAnimalBindThis(animal) {\n        this.props.addAnimal(animal)\n    }\n\n    renderAnimal() {\n        return (\n            <section className=\"my_animals\">\n                <button onClick={() => this.addAnimal(window.prompt())}>\n                    Add Animal\n                </button>\n                <ul>\n                    {this.props.animals.map(animal => <li>{ animal }</li>}\n                </ul>\n            </section>\n        )\n    }\n}\n\nexport default new SubPage()`\n","export default `// src/App.js\n\nimport React from \"react\";\n\nimport SubPage from './partials/SubPage'\n\nimport { withReactizy } from \"reactizy\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = { foo: 'bar' }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <p> There are {props.peopleNumber} people </p>\n                <button onClick={props.addPerson}>Add people</button>\n                { this.renderAnimal()  }\n            </div>\n        );\n    }\n}\n\nApp.reduxers = [ [\"peopleNumber\"], [\"addPeople\"] ]\n\nexport default withReactizy(App, SubPage);`\n","import React from 'react'\n\nimport Code from \"./../components/Code\"\n\nimport indexCode from './code/HocImporter_Index'\nimport simpleCode from './code/HocImporter_Simple'\nimport innerCode from './code/HocImporter_Inner'\n\nexport default () => (\n    <section name='hoc importer' className='hoc_importer'> \n        <h1>Hoc Importer</h1>\n        <h2>Introduction</h2>\n        <p>The <b>Hoc Importer</b> allows to declare with simplicity the High Order Component to use with your own component</p>\n        \n        <h2>Usage</h2>\n\n        <h3>With Reactizy Full Feature</h3>\n        <p>In the <i>index.js</i> file, just add the <code>uses</code> attribute on the <code>Store</code> Component to register the list of Hocs</p>\n        <Code>{indexCode}</Code>\n\n        <h3>Without Reactizy Store Feature</h3>\n        <p>In the <i>index.js</i> file, just wrapped the <code>Provider</code> with the registered list of Hocs as value</p>\n        <Code>{simpleCode}</Code>\n\n        <h3>Usage In Component</h3>\n        <Code>{innerCode}</Code>\n\n    </section>\n)\n","export default `// index.js\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport login from './reduxers/login'\nimport pets from './reduxers/pets'\n\nimport { Store } from 'reactizy'\n\nimport { withRouter } from 'react-router-dom'\n\nimport AlertTemplate from 'react-alert-template-basic'\n\nconst alertOptions = {\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  transition: transitions.SCALE\n}\n\nconst hocs = {\n    alert: withAlert(),\n    router: withRouter\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertProvider template={AlertTemplate} {...alertOptions}> // The react-alert Provider\n      <Store reduxers={[login, pets]} uses={hocs}>\n        <App />\n      </Store>\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n`\n","export default `// index.js\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport login from './reduxers/login'\nimport pets from './reduxers/pets'\n\nimport { Provider } from 'reactizy'\nimport { withRouter } from 'react-router-dom'\n\nimport AlertTemplate from 'react-alert-template-basic'\n\nconst alertOptions = {\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  transition: transitions.SCALE\n}\n\nconst hocs = {\n    alert: withAlert(),\n    router: withRouter\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertProvider template={AlertTemplate} {...alertOptions}> // The react-alert Provider\n      <Provider value={hoc}>\n        <App />\n      </Provider>\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n`\n","\nexport default `import { withReactizy } from 'reactizy'\n\nconst Component = props => (\n    <div>\n        <button onClick={() => props.alert.success(\"Success Message\")}>Show Alert</button>\n\n        <button onClick={() => props.history.push(\"/another-url\")}>Go to another Url</button>\n    </div>\n)\n\nComponent.use = [\"alert\", \"router\"]\n\nexport default withReactizy(Component)`\n","import React from \"react\"\n\nimport Sidebar from \"./components/Sidebar\"\nimport Header from \"./components/Header\"\n\nimport { BrowserRouter as Router, withRouter, Route, Switch } from \"react-router-dom\"\n\nimport Home from \"./pages/Home\"\nimport Api from \"./pages/Api\"\nimport GetStarted from \"./pages/GetStarted\"\nimport Redux from \"./pages/Redux\"\nimport Autobind from \"./pages/Autobind\"\nimport Splitter from \"./pages/Splitter\"\nimport HocImporter from \"./pages/HocImporter\"\n\nimport \"./styles/App.scss\"\n\nfunction useQuery() {}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            page: new URLSearchParams(document.location.search).get(\"page\"),\n        }\n\n        this.updateUrl = this.updateUrl.bind(this)\n    }\n\n    componentDidUpdate() {\n        const page = new URLSearchParams(document.location.search).get(\"page\")\n        if (this.state.page !== page) {\n            this.setState({ page })\n        }\n    }\n\n    updateUrl(page) {\n        this.setState({page})\n    }\n\n    render() {\n        console.log(this.state.page)\n        const getPage = () => {\n            if ([null, undefined].indexOf(this.state.page) !== -1) {\n                return Home\n            }\n\n            switch (this.state.page) {\n                case \"api\":\n                    return Api\n                case \"get-started\":\n                    return GetStarted\n                case \"redux-and-reduxers\":\n                    return Redux\n                case \"splitter\":\n                    return Splitter\n                case \"autobind\":\n                    return Autobind\n                case \"hoc-importer\":\n                    return HocImporter\n                default:\n                    return Home\n            }\n        }\n\n        const Page = getPage()\n\n        return (\n            <div className='App'>\n                <Header />\n                    <div className='wrapper'>\n                        <Sidebar update={this.updateUrl}/>\n                        <div className='content'>\n                            <Page />\n                        </div>\n                    </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}